A guide to writing modules for the Automation Scripting Tool

The Automation Scripting Tools is a command interpreter, written in perl, that allows for the control of any number of hosts over ssh in a familiar programming enviornment. In order to connect to a host, you have to set a few configuration options. These can be hard coded into the script (see the %ssh hash) or chosen dynamically at runtime. In order to connect as admin with a known set of keys, one would write

config admin /home/henry/.ssh/hq_rsa.pub /home/henry/ssh/hq_rsa


When logging in to a host, the 'connect' command is used. 

connect 10.162.2.101           
connect 10.162.2.108 henry
connect 10.162.2.137 recipient 

For convenience, a host can be referenced by its alias. As of now, an alias may only be administered at the time of connection. 


Now that we are connected to some hosts, we can start issuing commands. The 'direct' command is used to forward instructions to connected hosts. It may be useful to have a good toolbox on the phone side, as well as the control side. Some short modules could easily be included in the cli, allowing for a wide range of functions. The 'direct' command will invoke a function on the phone, and return when the function returns. Output is forwareded immediately to the scripting tool. An example script might look as follows:

; Any line with a semicolon is a comment.
; And according to my directory, henry's 
; extension is 555. The keycode for 5 is 35
direct marta push 35 # number 5
direct marta push 35
direct marta push 35
direct marta push 17660 # dial
direct recipient answer_incoming


where
'push' is an imaginary command in the cli that tells the phone buttons have been pushed. Buttons are referred to by their keycodes (x) through the forgeDTMF command:
forgeDTMF x 1
forgeDTMF x 0

and 'answer_incoming' is a cli command that waits until recognizing an imcoming call, answers it, (perhaps delaying a small amount for audio cutthrough and rtp establishment,) and returns.


When the above snippet completes, the two phones will be engaged in a call. 




This syntax is rather bulky, and it's nice to save keystrokes. Instead of utilizing C-x r t, one can write a block of code as a subroutine. In a separate file, write a block of code you would like to direct to a host. Let's call this file dial555.auto, and make it behave identically to the above script:

push 35 # number 5
push 35
push 35
push 17660 # dial


Now our main code has been shortened to:

config admin /home/henry/.ssh/hq_rsa.pub /home/henry/ssh/hq_rsa
connect 10.162.2.137 marta
connect 10.162.2.108 recipient # say his ext. is 555
direct marta dial555.auto
direct recipient answer_incoming



Finally, no language would be useful without loops. Loops in this language take one argument, the number of times to repeat the loop. If one wanted to repeat a loop n times, the syntax is:

n {
; commands
; more commands
}

taking care to place the bounds of the loop on lines by themselves. Nested loops are supported, as well as loops within subroutines.
